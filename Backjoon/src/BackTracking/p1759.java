package BackTracking;
import java.util.*;

/*
 * Problem #1759 암호만들기
 * 
 * 바로 어제 최백준 조교가 방 열쇠를 주머니에 넣은 채 깜빡하고 서울로 가 버리는 황당한 상황에 직면한 조교들은, 702호에 새로운 보안 시스템을 설치하기로 하였다. 이 보안 시스템은 열쇠가 아닌 암호로 동작하게 되어 있는 시스템이다.
 * 암호는 서로 다른 L개의 알파벳 소문자들로 구성되며 최소 한 개의 모음과 최소 두 개의 자음으로 구성되어 있다고 알려져 있다. 
 * 또한 정렬된 문자열을 선호하는 조교들의 성향으로 미루어 보아 암호를 이루는 알파벳이 암호에서 증가하는 순서로 배열되었을 것이라고 추측된다. 즉, abc는 가능성이 있는 암호이지만 bac는 그렇지 않다.
 * 새 보안 시스템에서 조교들이 암호로 사용했을 법한 문자의 종류는 C가지가 있다고 한다. 이 알파벳을 입수한 민식, 영식 형제는 조교들의 방에 침투하기 위해 암호를 추측해 보려고 한다. 
 * C개의 문자들이 모두 주어졌을 때, 가능성 있는 암호들을 모두 구하는 프로그램을 작성하시오.
 * 
	입력
	첫째 줄에 두 정수 L, C가 주어진다. (3 ≤ L ≤ C ≤ 15) 다음 줄에는 C개의 문자들이 공백으로 구분되어 주어진다. 주어지는 문자들은 알파벳 소문자이며, 중복되는 것은 없다.
	
	출력
	각 줄에 하나씩, 사전식으로 가능성 있는 암호를 모두 출력한다.
 */
public class p1759 {
	
	static int L, C;
	static String [] list;
	static ArrayList <String> result = new ArrayList<>();

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		L = sc.nextInt();
		C = sc.nextInt();
		
		list = new String [C];
		for(int i=0; i<C; i++)
			list[i] = sc.next();
		
		Arrays.sort(list);
		backtracking(0,0,"",0,0);
	}

	// 백트랙킹으로 해결, 
	// offset(지금까지추가한 letter의 길이), n(list의 인덱스), str(현재까지의 추가된 string), m(모음 개수), j(자음 개수)
	public static void backtracking (int offset, int n, String str, int m, int j){
		// 길이가 L개에 다다르고 모음, 자음 개수를 만족했으면 출력
		if(offset == L && m>=1 && j>=2) {
			System.out.println(str);
			return;
		}
		if(n >= C) return;
		
		String s = list[n];
		int tmp = s.charAt(0)-'a';
		int mm=0;
		int jj=0;
		
		// 모음 판별
		if(tmp == 0 || tmp == 4 || tmp == 8 || tmp == 14 || tmp == 20) mm++;
		else jj++;
		
		// 넣었을 경우
		backtracking(offset+1, n+1, str+s, m+mm, j+jj);
		
		// 안 넣었을 경우
		backtracking(offset, n+1, str, m, j);
	}
}
